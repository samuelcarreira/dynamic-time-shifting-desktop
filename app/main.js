/*!
 * Dynamic Time-shifting Desktop main process
 * 
 * @author    Samuel Carreira <samuelcarreira@outlook.com>
 * @copyright (C) 2018 Samuel Carreira
 * @license   MIT
 * @version   See package.json
 */"use strict";const{app,BrowserWindow,ipcMain,Tray,Menu,dialog,shell}=require("electron"),path=require("path"),url=require("url"),winston=require("winston"),electronStore=require("electron-store"),config=require("./config"),startup=require("./startup"),dynamicWallpaper=require("./dynamic-wallpaper"),fsoperations=require("./fsoperations"),checkForUpdates=require("./check-for-updates");class Settings extends electronStore{constructor(a){super(a),this._options={}}get getRAMOptions(){return this._options}set setRAMOptions(a){this._options=a}getR(a){if("string"!=typeof a)throw new TypeError("Property should be a string");return this._options[a]}setR(a,b){this._options[a]=b}}const SETTINGS=new Settings({defaults:config.DEFAULT_SETTINGS});SETTINGS.setRAMOptions=SETTINGS.store,global.Log=winston.createLogger({transports:[new winston.transports.File({filename:path.resolve(app.getPath("userData"),"log.txt"),level:"info",maxsize:5242880,maxfiles:1,format:winston.format.combine(winston.format.timestamp(),winston.format.json())}),new winston.transports.Console({format:winston.format.combine(winston.format.colorize(),winston.format.simple()),level:config.ISDEV?"debug":"error"})]});let mainWindow=null,previewWindow=null,settingsWindow=null,tray=null;const wallpaperCore=new dynamicWallpaper(SETTINGS.getR("wallpapers"));process.on("uncaughtException",a=>{Log.error(`Uncaught Exception: ${a}`)}),process.on("unhandledRejection",a=>{Log.error(`Unhandled Rejection: ${a}`)});function makeSingleInstance(){return!process.mas&&app.makeSingleInstance(()=>{mainWindow&&(mainWindow.isMinimized()&&mainWindow.restore(),mainWindow.focus(),mainWindow.show())})}function windowsIcon(){return"win32"===process.platform?path.join(__dirname,"/assets/icons/icon.ico"):path.join(__dirname,"/assets/icons/512x512.png")}function trayImage(){return"win32"===process.platform?path.join(__dirname,"assets","trayicons","traywin-color.ico"):"linux"===process.platform?path.join(__dirname,"assets","trayicons","traylinux.png"):"darwin"===process.platform?path.join(__dirname,"assets","trayicons","iconTemplate.png"):null}function createWindow(){if(makeSingleInstance())return app.quit();const a={autoHideMenuBar:!0,defaultEncoding:"utf-8",maximizable:!1,resizable:!1,movable:!0,show:!1,title:app.getName(),darkTheme:!0,hasShadow:!1,thickFrame:!0,icon:windowsIcon(),height:620,width:400,webPreferences:{webaudio:!1}};mainWindow=new BrowserWindow(a),mainWindow.loadURL(url.format({pathname:path.join(__dirname,"main.html"),protocol:"file:",slashes:!0})),config.ISDEV,mainWindow.webContents.on("did-finish-load",()=>{SETTINGS.getR("minimizeToTray")?SETTINGS.getR("notifications")&&mainWindow.webContents.send("ipcShowNotification",{body:"App is running in background..."}):setTimeout(()=>{mainWindow.show()},100)}),mainWindow.webContents.on("crashed",()=>{Log.error("Main window crashed!"),mainWindow.reload()}),mainWindow.webContents.on("unresponsive",()=>{Log.error("Main window unresponsive!"),mainWindow.reload()}),mainWindow.on("closed",()=>{mainWindow=null,app.quit()}),mainWindow.on("minimize",a=>{SETTINGS.getR("minimizeToTray")&&(a.preventDefault(),mainWindow.hide())})}function createPreviewWindow(){const a={parent:mainWindow,modal:!0,show:!1,autoHideMenuBar:!0,defaultEncoding:"utf-8",useContentSize:!0,center:!0,minimizable:!1,closable:!0,maximizable:!1,resizable:!0,movable:!0,title:"Preview wallpapers",darkTheme:!0,thickFrame:!0,icon:windowsIcon(),height:480,width:720,backgroundColor:"#000000",webPreferences:{webaudio:!1,webgl:!1}};previewWindow=new BrowserWindow(a),previewWindow.loadURL(url.format({pathname:path.join(__dirname,"preview.html"),protocol:"file:",slashes:!0})),config.ISDEV,previewWindow.once("ready-to-show",()=>{previewWindow.show()}),previewWindow.webContents.on("crashed",()=>{Log.error("Preview window crashed!"),previewWindow.reload()}),previewWindow.webContents.on("unresponsive",()=>{Log.error("Preview window unresponsive!"),previewWindow.reload()}),previewWindow.on("closed",()=>{previewWindow=null})}function createSettingsWindow(){const a={parent:mainWindow,modal:!0,show:!1,autoHideMenuBar:!0,defaultEncoding:"utf-8",useContentSize:!0,center:!0,minimizable:!1,closable:!0,maximizable:!1,resizable:!1,movable:!0,title:"Settings",darkTheme:!0,thickFrame:!0,icon:windowsIcon(),height:640,width:400,backgroundColor:"#413e56",webPreferences:{webaudio:!1,webgl:!1}};settingsWindow=new BrowserWindow(a),settingsWindow.loadURL(url.format({pathname:path.join(__dirname,"settings.html"),protocol:"file:",slashes:!0})),config.ISDEV,settingsWindow.once("ready-to-show",()=>{settingsWindow.show()}),settingsWindow.webContents.on("crashed",()=>{Log.error("Preview window crashed!"),settingsWindow.reload()}),settingsWindow.webContents.on("unresponsive",()=>{Log.error("Preview window unresponsive!"),settingsWindow.reload()}),settingsWindow.on("closed",()=>{settingsWindow=null})}function trayIcon(){try{const a=trayImage();if(tray=new Tray(a),"darwin"===process.platform){const a=path.join(__dirname,"assets","trayicons","iconTemplate.png");tray.setPressedImage(a),tray.setHighlightMode("selection"),tray.on("click",()=>{mainWindow.isVisible()?mainWindow.hide():mainWindow.show()}),mainWindow.on("show",()=>{tray.setHighlightMode("always")}).on("hide",()=>{tray.setHighlightMode("never")})}tray.setToolTip(app.getName());const b=Menu.buildFromTemplate([{label:"Show",type:"normal",click(){mainWindow.isVisible()||mainWindow.show()}},{type:"separator"},{label:"Quit",type:"normal",accelerator:"CmdOrCtrl+W",role:"quit"}]);tray.setContextMenu(b),tray.on("double-click",()=>{mainWindow.isVisible()||mainWindow.show()})}catch(a){Log.error(`Tray icon: ${a}`)}}app.on("window-all-closed",()=>{"darwin"!==process.platform&&app.quit()}).on("activate",()=>{null===mainWindow&&createWindow()}).on("before-quit",()=>{Log.info("Application exiting...")}).on("ready",()=>{init()});const updater=new checkForUpdates.Updater;function checkForUpdatesNow(){Log.info("Checking for updates...");const a=`${config.UPDATE_URL}?v=${Math.random()}`;updater.checkForUpdates(a)}updater.on("checking-for-updates",()=>{settingsWindow&&settingsWindow.webContents.send("ipcUpdateInfo","Checking for updates...")}).on("update-available",a=>{Log.info(`Update available! New version: ${a}`),settingsWindow&&settingsWindow.webContents.send("ipcUpdateInfo",`Update available. New version: ${a}`);dialog.showMessageBox({type:"info",title:"Update available",message:`Do you wish to download the new version:  ${a}?`,buttons:["Yes","No"]},a=>{0===a&&shell.openExternal(config.DOWNLOAD_URL)})}).on("update-not-available",()=>{Log.info("Update not available"),settingsWindow&&settingsWindow.webContents.send("ipcUpdateInfo","You have the most recent version!"),SETTINGS.getR("notifications")&&mainWindow&&mainWindow.webContents.send("ipcShowNotification",{body:"You have the most recent version! No updates available."})}).on("error",a=>{Log.error(`Updater: ${a}`),settingsWindow&&settingsWindow.webContents.send("ipcUpdateInfo","Error on checking for updates! Please try again later or visit the official website")}),app.setAppUserModelId("com.samuelcarreira.windows-dynamic-desktop"),app.setAsDefaultProtocolClient("windows-dynamic-desktop"),ipcMain.on("ipcSliderChange",(a,b)=>{const c="file://"+path.normalize(wallpaperCore.calculateWallpaperFile(b/100));a.sender.send("ipcWallpaperFile",c)}).on("ipcShowLicenses",()=>{shell.openItem(path.join(path.dirname(app.getPath("exe")),"OPENSOURCELICENSES.txt"))}).on("ipcSamuelCarreira",()=>{shell.openExternal("http://www.samuelcarreira.com")}).on("ipcCheckForUpdates",()=>{checkForUpdatesNow()}).on("ipcButtonAddFile",a=>{dialog.showOpenDialog({properties:["openFile"],filters:[{name:"Images",extensions:["jpg","png","jpeg"]}]},b=>{b&&(Log.debug(`Selected files: ${b}`),a.sender.send("ipcAddImages",b),wallpaperCore.addWallpapers(b),SETTINGS.setR("wallpapers",wallpaperCore.wallpapersList),SETTINGS.set("wallpapers",wallpaperCore.wallpapersList))})}).on("ipcButtonAddFolder",a=>{dialog.showOpenDialog({properties:["openDirectory"]},b=>{b&&(Log.debug(`Selected folder: ${b}`),fsoperations.globDirPromise(b[0],{includePath:!0}).then(b=>{Log.debug(`Selected files: ${b}`),a.sender.send("ipcAddImages",b),wallpaperCore.addWallpapers(b),SETTINGS.setR("wallpapers",wallpaperCore.wallpapersList),SETTINGS.set("wallpapers",wallpaperCore.wallpapersList)}).catch(a=>{Log.error(`Select folder: ${a}`)}))})}).on("getInitialContent",a=>{a.sender.send("ipcAddImages",SETTINGS.getR("wallpapers"))}).on("ipcNewWallpaperList",(a,b)=>{wallpaperCore.setWallpapers=b,SETTINGS.setR("wallpapers",b),SETTINGS.set("wallpapers",b)}).on("ipcButtonPreview",()=>{previewWindow||createPreviewWindow()}).on("ipcButtonSettings",()=>{settingsWindow||createSettingsWindow()}).on("ipcGetSettings",a=>{a.returnValue={startup:SETTINGS.getR("startup"),notifications:SETTINGS.getR("notifications"),updates:SETTINGS.getR("updates"),tray:SETTINGS.getR("minimizeToTray")}}).on("ipcSaveSettings",(a,b)=>{SETTINGS.setR("startup",b.startup),SETTINGS.setR("notifications",b.notifications),SETTINGS.setR("minimizeToTray",b.tray),SETTINGS.setR("updates",b.updates),SETTINGS.set("startup",b.startup),SETTINGS.set("notifications",b.notifications),SETTINGS.set("minimizeToTray",b.tray),SETTINGS.set("updates",b.updates),startup.autoLaunchApp(b.startup,app.getName(),!0),b.notifications&&null===tray&&trayIcon(),b.notifications||null===tray||(tray=null)}),wallpaperCore.on("wallpaperChanged",()=>{SETTINGS.getR("notifications")&&mainWindow&&mainWindow.webContents.send("ipcShowNotification",{body:"Wallpaper changed"})});function init(){Log.info(`========= Welcome to ${app.getName()} v.${app.getVersion()} =========`),createWindow(),startup.autoLaunchApp(SETTINGS.getR("startup"),app.getName(),!0),SETTINGS.getR("minimizeToTray")&&trayIcon(),SETTINGS.getR("updates")&&setTimeout(()=>{checkForUpdatesNow()},3e4),void 0}